name: Deploy Chatbot
on:
  push:
    branches:
      - main
      
  workflow_dispatch:
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Check out the repository's code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Node.js with the version required by your project
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Step 3: Install backend dependencies (from the root folder)
    - name: Install backend dependencies
      run: npm install

    # Step 4: Install frontend dependencies (in 'lib/user-interface/app')
    - name: Install frontend dependencies
      run: |
        cd lib/user-interface/app
        npm install
        npm install -g aws-cdk

    # Step 5: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 6: Bootstrap the AWS environment (from the root folder)
    - name: Bootstrap AWS environment
      run: cdk bootstrap

    # Step 7: Build the project
    - name: Build project
      run: npm run build

    # Step 8: Deploy main CDK stack
    - name: Deploy main CDK stack
      run: cdk deploy ITOPSTestRAGStack --require-approval never

    # Step 9: FedRAMP Compliance - Fix DynamoDB Autoscaling Alarms
    - name: Ensure FedRAMP Compliance for Autoscaling Alarms
      run: |
        # Get SNS topic ARN for alarm notifications
        TOPIC_ARN=$(aws sns list-topics --query "Topics[?contains(TopicArn, 'ITOPSTestRAGStack-fedramp-compliance-alarms')].TopicArn" --output text)
        
        if [ -z "$TOPIC_ARN" ]; then
          echo "ERROR: FedRAMP compliance SNS topic not found!"
          exit 1
        fi
        
        # Check for non-compliant TargetTracking alarms and fix them
        NON_COMPLIANT_ALARMS=$(aws cloudwatch describe-alarms \
          --query "MetricAlarms[?contains(AlarmName, 'TargetTracking-') && length(AlarmActions||[]) == \`0\`].AlarmName" \
          --output text)
        
        if [ ! -z "$NON_COMPLIANT_ALARMS" ]; then
          echo "Applying FedRAMP compliance to autoscaling alarms..."
          echo "$NON_COMPLIANT_ALARMS" | while read alarm; do
            if [ ! -z "$alarm" ]; then
              aws cloudwatch put-metric-alarm \
                --alarm-name "$alarm" \
                --alarm-actions "$TOPIC_ARN" \
                --ok-actions "$TOPIC_ARN" \
                --insufficient-data-actions "$TOPIC_ARN"
            fi
          done
        fi

    # Step 10: Fetch CloudFormation outputs and save to a file
    - name: Fetch CloudFormation Outputs
      run: |
        aws cloudformation describe-stacks --stack-name ITOPSTestRAGStack --query "Stacks[0].Outputs" > stack-outputs.json
        
    # Step 11: Upload the output file as an artifact
    - name: Upload Outputs as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: stack-outputs
        path: stack-outputs.json
