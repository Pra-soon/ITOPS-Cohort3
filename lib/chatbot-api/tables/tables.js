"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
class TableStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Define the table
        const chatHistoryTable = new aws_dynamodb_1.Table(scope, 'ChatHistoryTable', {
            partitionKey: { name: 'user_id', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'session_id', type: aws_dynamodb_1.AttributeType.STRING },
        });
        // Add a global secondary index to sort ChatHistoryTable by time_stamp
        chatHistoryTable.addGlobalSecondaryIndex({
            indexName: 'TimeIndex',
            partitionKey: { name: 'user_id', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'time_stamp', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
        });
        this.historyTable = chatHistoryTable;
        // Define the second table (UserFeedbackTable)
        const userFeedbackTable = new aws_dynamodb_1.Table(scope, 'UserFeedbackTable', {
            partitionKey: { name: 'Topic', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'CreatedAt', type: aws_dynamodb_1.AttributeType.STRING },
        });
        // Add a global secondary index to UserFeedbackTable with partition key CreatedAt
        userFeedbackTable.addGlobalSecondaryIndex({
            indexName: 'CreatedAtIndex',
            partitionKey: { name: 'CreatedAt', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
        });
        userFeedbackTable.addGlobalSecondaryIndex({
            indexName: 'AnyIndex',
            partitionKey: { name: 'Any', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'CreatedAt', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
        });
        this.feedbackTable = userFeedbackTable;
        const evalSummariesTable = new aws_dynamodb_1.Table(scope, 'EvaluationSummariesTable', {
            partitionKey: { name: 'PartitionKey', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'Timestamp', type: aws_dynamodb_1.AttributeType.STRING },
        });
        this.evalSummaryTable = evalSummariesTable;
        const evalResultsTable = new aws_dynamodb_1.Table(scope, 'EvaluationResultsTable', {
            partitionKey: { name: 'EvaluationId', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'QuestionId', type: aws_dynamodb_1.AttributeType.STRING },
        });
        // add secondary index to sort EvaluationResultsTable by Question ID
        evalResultsTable.addGlobalSecondaryIndex({
            indexName: 'QuestionIndex',
            partitionKey: { name: 'EvaluationId', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'QuestionId', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
        });
        this.evalResultsTable = evalResultsTable;
        const kpiLogsTable = new aws_dynamodb_1.Table(scope, 'KPILogsTable', {
            partitionKey: { name: 'Username', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'Timestamp', type: aws_dynamodb_1.AttributeType.STRING },
        });
        const dailyLoginTable = new aws_dynamodb_1.Table(scope, 'DailyLoginTable', {
            partitionKey: { name: 'Timestamp', type: aws_dynamodb_1.AttributeType.STRING },
        });
        this.kpiLogsTable = kpiLogsTable;
        this.dailyLoginTable = dailyLoginTable;
    }
}
exports.TableStack = TableStack;
//# sourceMappingURL=data:application/json;base64,