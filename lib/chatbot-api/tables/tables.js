"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
class TableStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Define the chat history table with auto-scaling
        const chatHistoryTable = new aws_dynamodb_1.Table(scope, 'ChatHistoryTable', {
            partitionKey: { name: 'user_id', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'session_id', type: aws_dynamodb_1.AttributeType.STRING },
            billingMode: aws_dynamodb_1.BillingMode.PROVISIONED,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add FedRAMP compliance tags
        aws_cdk_lib_1.Tags.of(chatHistoryTable).add('BackupRequired', 'true');
        aws_cdk_lib_1.Tags.of(chatHistoryTable).add('Environment', 'Production');
        aws_cdk_lib_1.Tags.of(chatHistoryTable).add('ComplianceLevel', 'FedRAMP');
        aws_cdk_lib_1.Tags.of(chatHistoryTable).add('DataClassification', 'Sensitive');
        // Add autoscaling for main table
        chatHistoryTable.autoScaleReadCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        chatHistoryTable.autoScaleWriteCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        // Add a global secondary index to sort ChatHistoryTable by time_stamp
        chatHistoryTable.addGlobalSecondaryIndex({
            indexName: 'TimeIndex',
            partitionKey: { name: 'user_id', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'time_stamp', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add autoscaling for TimeIndex GSI
        chatHistoryTable.autoScaleGlobalSecondaryIndexReadCapacity('TimeIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        chatHistoryTable.autoScaleGlobalSecondaryIndexWriteCapacity('TimeIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        this.historyTable = chatHistoryTable;
        // Define the user feedback table with auto-scaling
        const userFeedbackTable = new aws_dynamodb_1.Table(scope, 'UserFeedbackTable', {
            partitionKey: { name: 'Topic', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'CreatedAt', type: aws_dynamodb_1.AttributeType.STRING },
            billingMode: aws_dynamodb_1.BillingMode.PROVISIONED,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add FedRAMP compliance tags
        aws_cdk_lib_1.Tags.of(userFeedbackTable).add('BackupRequired', 'true');
        aws_cdk_lib_1.Tags.of(userFeedbackTable).add('Environment', 'Production');
        aws_cdk_lib_1.Tags.of(userFeedbackTable).add('ComplianceLevel', 'FedRAMP');
        aws_cdk_lib_1.Tags.of(userFeedbackTable).add('DataClassification', 'Sensitive');
        // Add autoscaling for main table
        userFeedbackTable.autoScaleReadCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        userFeedbackTable.autoScaleWriteCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        // Add a global secondary index to UserFeedbackTable with partition key CreatedAt
        userFeedbackTable.addGlobalSecondaryIndex({
            indexName: 'CreatedAtIndex',
            partitionKey: { name: 'CreatedAt', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add autoscaling for CreatedAtIndex GSI
        userFeedbackTable.autoScaleGlobalSecondaryIndexReadCapacity('CreatedAtIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        userFeedbackTable.autoScaleGlobalSecondaryIndexWriteCapacity('CreatedAtIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        userFeedbackTable.addGlobalSecondaryIndex({
            indexName: 'AnyIndex',
            partitionKey: { name: 'Any', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'CreatedAt', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add autoscaling for AnyIndex GSI
        userFeedbackTable.autoScaleGlobalSecondaryIndexReadCapacity('AnyIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        userFeedbackTable.autoScaleGlobalSecondaryIndexWriteCapacity('AnyIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        this.feedbackTable = userFeedbackTable;
        const evalSummariesTable = new aws_dynamodb_1.Table(scope, 'EvaluationSummariesTable', {
            partitionKey: { name: 'PartitionKey', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'Timestamp', type: aws_dynamodb_1.AttributeType.STRING },
            billingMode: aws_dynamodb_1.BillingMode.PROVISIONED,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add FedRAMP compliance tags
        aws_cdk_lib_1.Tags.of(evalSummariesTable).add('BackupRequired', 'true');
        aws_cdk_lib_1.Tags.of(evalSummariesTable).add('Environment', 'Production');
        aws_cdk_lib_1.Tags.of(evalSummariesTable).add('ComplianceLevel', 'FedRAMP');
        aws_cdk_lib_1.Tags.of(evalSummariesTable).add('DataClassification', 'Sensitive');
        // Add autoscaling for evaluation summaries table
        evalSummariesTable.autoScaleReadCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        evalSummariesTable.autoScaleWriteCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        this.evalSummaryTable = evalSummariesTable;
        const evalResultsTable = new aws_dynamodb_1.Table(scope, 'EvaluationResultsTable', {
            partitionKey: { name: 'EvaluationId', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'QuestionId', type: aws_dynamodb_1.AttributeType.STRING },
            billingMode: aws_dynamodb_1.BillingMode.PROVISIONED,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add FedRAMP compliance tags
        aws_cdk_lib_1.Tags.of(evalResultsTable).add('BackupRequired', 'true');
        aws_cdk_lib_1.Tags.of(evalResultsTable).add('Environment', 'Production');
        aws_cdk_lib_1.Tags.of(evalResultsTable).add('ComplianceLevel', 'FedRAMP');
        aws_cdk_lib_1.Tags.of(evalResultsTable).add('DataClassification', 'Sensitive');
        // Add autoscaling for evaluation results table
        evalResultsTable.autoScaleReadCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        evalResultsTable.autoScaleWriteCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        // add secondary index to sort EvaluationResultsTable by Question ID
        evalResultsTable.addGlobalSecondaryIndex({
            indexName: 'QuestionIndex',
            partitionKey: { name: 'EvaluationId', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'QuestionId', type: aws_dynamodb_1.AttributeType.STRING },
            projectionType: aws_dynamodb_1.ProjectionType.ALL,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add autoscaling for QuestionIndex GSI
        evalResultsTable.autoScaleGlobalSecondaryIndexReadCapacity('QuestionIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        evalResultsTable.autoScaleGlobalSecondaryIndexWriteCapacity('QuestionIndex', {
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        this.evalResultsTable = evalResultsTable;
        const kpiLogsTable = new aws_dynamodb_1.Table(scope, 'KPILogsTable', {
            partitionKey: { name: 'Username', type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: 'Timestamp', type: aws_dynamodb_1.AttributeType.STRING },
            billingMode: aws_dynamodb_1.BillingMode.PROVISIONED,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add FedRAMP compliance tags
        aws_cdk_lib_1.Tags.of(kpiLogsTable).add('BackupRequired', 'true');
        aws_cdk_lib_1.Tags.of(kpiLogsTable).add('Environment', 'Production');
        aws_cdk_lib_1.Tags.of(kpiLogsTable).add('ComplianceLevel', 'FedRAMP');
        aws_cdk_lib_1.Tags.of(kpiLogsTable).add('DataClassification', 'Sensitive');
        // Add autoscaling for KPI logs table
        kpiLogsTable.autoScaleReadCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        kpiLogsTable.autoScaleWriteCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        const dailyLoginTable = new aws_dynamodb_1.Table(scope, 'DailyLoginTable', {
            partitionKey: { name: 'Timestamp', type: aws_dynamodb_1.AttributeType.STRING },
            billingMode: aws_dynamodb_1.BillingMode.PROVISIONED,
            readCapacity: 5,
            writeCapacity: 5,
        });
        // Add FedRAMP compliance tags
        aws_cdk_lib_1.Tags.of(dailyLoginTable).add('BackupRequired', 'true');
        aws_cdk_lib_1.Tags.of(dailyLoginTable).add('Environment', 'Production');
        aws_cdk_lib_1.Tags.of(dailyLoginTable).add('ComplianceLevel', 'FedRAMP');
        aws_cdk_lib_1.Tags.of(dailyLoginTable).add('DataClassification', 'Sensitive');
        // Add autoscaling for daily login table
        dailyLoginTable.autoScaleReadCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        dailyLoginTable.autoScaleWriteCapacity({
            minCapacity: 5,
            maxCapacity: 100,
        }).scaleOnUtilization({
            targetUtilizationPercent: 70,
        });
        this.kpiLogsTable = kpiLogsTable;
        this.dailyLoginTable = dailyLoginTable;
    }
}
exports.TableStack = TableStack;
//# sourceMappingURL=data:application/json;base64,